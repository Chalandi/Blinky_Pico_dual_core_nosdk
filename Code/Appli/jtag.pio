/*
  The IEEE standard defines the following TAP signals, used for the serial communication and driving the TAP
  controller (JTAG state machine):
  
   ---------------------------------------------------------------------------------------------------
  | Signal  | Name        | Description                                          | Pico pin direction |
  |---------|-------------|------------------------------------------------------|--------------------|
  | TDI     | Test Data   | In serial data from debugger to target               | Out                |
  | TDO     | Test Data   | Out serial data from target to debugger              | In                 |
  | TCK     | Test Clock  | Clock signal from debugger to target                 | Out                |
  | TMS     | Test Mode   | Select controls the TAP controller state transitions | Out                |
  | TRST    | Test Reset  | optional, resets the TAP controller                  | Out                |
   ---------------------------------------------------------------------------------------------------
  The TMS and TDI line are sampled by the DTAP on each rising edge on the TCK line. The TDO line
  changes its value after a falling edge on the TCK line.

   --------------------------------------------------------------------------------------------------------------------
  |                                             JTAG OPERATION                                                         |
  |--------------------------------------------------------------------------------------------------------------------|
  | Current TAP State                  JTAG Operation                 Description                                      |
  |--------------------------------------------------------------------------------------------------------------------|
  | Run-Test/Idle                                                     Pause Parking Position                           |
  |                                    TMS = 1100                     move to Shift-IR state                           |
  |                                    TDI = 0000                     ignored by TAP                                   |
  |                                    TOO = xxxx                     x = don't care                                   |
  | Shift-IR                                                                                                           |
  |                                    TMS = 00000001                 leave Shift-IR (TMS = 1) on last bit             |
  |                                    TDI = aaaaaaaa                 new value to IR                                  |
  |                                    TOO = bbbbbbbb                 current value from IR                            |
  | Exit1-IR                                                                                                           |
  |                                    TMS = 1100                     move to Shift-DR state                           |
  |                                    TDI = 0000                     ignored by TAP                                   |
  |                                    TOO = xxxx                     x = don't care                                   |
  | Shift-DR                                                                                                           |
  |                                    TMS = 00000001                 leave Shift-DR (TMS = 1) on last bit             |
  |                                    TDI = aaaaaaaa                 new value to DR                                  |
  |                                    TOO = bbbbbbbb                 current value from DR                            |
  | Exit1-DR                                                                                                           |
  |                                    TMS = 10                       Return to Pause Parking Position                 |
  |                                    TDI = 00                                                                        |
  |                                    TDO = xx                                                                        |
  | Run-Test/Idle                                                     Pause Parking Position                           |
  |                                                                   Ready for next operation                         |
   --------------------------------------------------------------------------------------------------------------------
*/

.define PIN_TRST   0   // GPIO_0: set
.define PIN_TMS    1   // GPIO_1: side-set
.define PIN_TCK    2   // GPIO_2: side-set
.define PIN_TDI    3   // GPIO_3: out
.define PIN_TDO    4   // GPIO_4: in

.define SET_TRST_HIGH      0x01
.define SET_TRST_LOW       0x00

.define SET_TMS_HIGH       0x02
.define SET_TMS_LOW        0x00

.define SET_TCK_HIGH       0x04
.define SET_TCK_LOW        0x00

.define SET_TDI_HIGH       0x08
.define SET_TDI_LOW        0x00

.define SIDE_SET_TMS_HIGH  0x01
.define SIDE_SET_TMS_LOW   0x00

.define SIDE_SET_TCK_HIGH  0x02
.define SIDE_SET_TCK_LOW   0x00

/*************************************************************************************/
/* This program is executed by the PIO state machine to initialize the pin direction */
/*************************************************************************************/
.program PIO_JTAG_SET_PIN_CONFIG
.wrap_target
    set pindirs, 0x0F /* Set (TRST, TMS, TCK and TDI) as output and (TDO) as input */
.wrap

/*************************************************************************************/
/* This program is executed by the PIO state machine to set the output pin level */
/*************************************************************************************/
.program PIO_JTAG_SET_PIN_OUTPUT
.wrap_target
    set pins, 0x0F /* Set (TRST, TMS, TCK and TDI) as logic 1 */
.wrap


/*************************************************************************************/
/* This program is executed by the PIO state machine to reset the JTAG TAP */
/*************************************************************************************/
.program PIO_JTAG_RESET_AND_IDLE
.side_set 2 opt
.wrap_target
    set x, 4 side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH)
PIO_JTAG_RESET_LOOP:
    set pins, SET_TRST_HIGH side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_HIGH) [1]
    set pins, SET_TRST_HIGH side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH)
    jmp x--  PIO_JTAG_RESET_LOOP
    set pins, SET_TRST_HIGH side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_LOW) [1]
    set pins, SET_TRST_HIGH side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_LOW) [1]
.wrap

/*************************************************************************************/
/* This program is executed by the PIO state machine to transfer JTAG command */
/*************************************************************************************/
.program PIO_JTAG

.side_set 2 opt

.define SHIFT_OUT_ONE_BIT   1
.define SHIFT_IN_ONE_BIT    1

.wrap_target

    set y, 1 /* loop twice : post-decrement counter so we loop twice with y=1
                             1st-pass : select IR and shift out IR register data
                             2nd-pass : select DR and shift out DR register data
             */

PIO_JTAG_DRIVE_TDI_LOOP_TWICE:
    /* read two FIFO's entries (size, data) in each pass */
    pull /* this pull is needed even in the AUTOPULL mode, as the PIO has a read OSR HW limitation.
            without this pull instruction x will contain 0 when the OSR is filled automatically
            by the out instruction that shift out the data
         */
    out x, 32 /* get the size by AUTOPULL the FIFO (OSR is empty) or stall if FIFO is empty */
    jmp !x PIO_JTAG_INIT /* x=0 means a request to output the JTAG init sequence */

    /* transition to Shift-IR / Shift-DR */
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_HIGH) [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH) [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_HIGH) [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH) [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_LOW)  [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_LOW)  [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_LOW)  [1]
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_LOW)  [1]

PIO_JTAG_DRIVE_TDI_LOOP:
    out pins, SHIFT_OUT_ONE_BIT side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_LOW)  [2]
    nop                         side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_LOW)
    in  pins, SHIFT_OUT_ONE_BIT
    jmp x--  PIO_JTAG_DRIVE_TDI_LOOP
    out pins, SHIFT_OUT_ONE_BIT side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_HIGH) [2]  /* output the last bit of data with TMS high */
    nop                         side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH) [1]
    in  pins, SHIFT_IN_ONE_BIT                                                    /* AUTOPUSH to FIFO if ISR is full (32-bit) */
    push block                                                                    /* Manual push of the DATA higher than 32-bit */
    jmp y-- PIO_JTAG_DRIVE_TDI_LOOP_TWICE

    /* set interrupt */
    ;irq set 0

    /* transition to Run-Test/Idle JTAG state */
    set pins, (SET_TDI_LOW | SET_TRST_HIGH) side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_HIGH) [1]
    jmp PIO_JTAG_IDLE_STATE                 side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH) [1]

    /* JTAG init sequence */
PIO_JTAG_INIT:
    set x, 4 side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH) /* minimum 5 cycles with TMS high */
PIO_JTAG_RESET_LOOP:
    set pins, SET_TRST_HIGH side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_HIGH) [1]
    nop                     side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_HIGH)
    jmp x--  PIO_JTAG_RESET_LOOP
PIO_JTAG_IDLE_STATE:
    nop                     side (SIDE_SET_TCK_LOW  | SIDE_SET_TMS_LOW) [1]
    nop                     side (SIDE_SET_TCK_HIGH | SIDE_SET_TMS_LOW) [1]

.wrap
